<?php
/**
 * @file
 * Create a time tracker widget.
 * Should end up with and API for an 
 * External Widget as well.
 * 
 * Get Time for Task
 * Set Time for Task
 * Find Time Related to
 * --Project
 * ----Task
 */
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;

//Define our id-key pairs
$applications = array(
        'APP001' => '28e336ac6c9423d946ba02d19c6a2632', //randomly generated app key 
);

//include our models
$path = drupal_get_path('module', 'project_timetracker');
DEFINE('TTPATH', $path);
DEFINE('APIKEY', '28e336ac6c9423d946ba02d19c6a2632');
DEFINE('APIID', 'APP01');

require_once($path . '/Models/projects_tt.model.inc');
require_once($path . '/includes/ApiCaller.php');
 /**
 * Implements hook_permission().
 */
function project_timetracker_permission() {
  return array(
    'project manager time tracker user' => array(
      'title' => t('User of PM Time Tracker Module'),
    ),
  );
}

function project_timetracker_menu(){
  $items['system/timetracker/v1/addtime'] = array(
    'access callback' => 'pm_helpers_check_api',
    'page callback' => 'project_tt_add_time',
    'page arguments' => array(4,5,6),
    'type' => MENU_CALLBACK,
  );

   $items['system/timetracker/v1/getTimes'] = array(
    'access callback' => 'pm_helpers_check_api',
    'page callback' => 'project_tt_get_times',
    'type' => MENU_CALLBACK,
  );
  
  $items['system/timetracker/v1/addtask'] = array(
    'access callback' => 'pm_helpers_check_api',
    'page callback' => 'project_tt_add_task',
    'file' => 'includes/project_tt_add_task.inc',
    'type' => MENU_CALLBACK,
  );  
 
   $items['system/timetracker/v1/testarea'] = array(
    'access arguments' => array('project manager time tracker user'),
    'page callback' => 'project_tt_add_test',
    'type' => MENU_CALLBACK,
  );
   
  return $items;
}


function project_tt_add_test() {
  //Use the api caller to do a test call 
  global $user;
  $apicaller = new ApiCaller('APP001', '28e336ac6c9423d946ba02d19c6a2632', 'http://local.d8.com/system/timetracker/v1/getTimes');
  $time_items = $apicaller->sendRequest(array(
      'uid' => $user->uid,
      'task' => 2,
  ));
  $output = print_r($time_items, 1);
  
  $form = drupal_get_form('project_tt_form');
  $output .= render($form);
  return $output;  
}


function project_tt_get_times(){
  watchdog('line 89', print_r($_REQUEST, 1));
  $params = array('uid' => $uid, 'task' => $task);
  require_once(TTPATH . '/Controllers/timer.inc');
  $controller = new Timer($_REQUEST);
  $result['data'] = $controller->readAction();
  $result['success'] = true;   
  return new JsonResponse($result);
}

function project_tt_add_task() {

}

function project_tt_add_time () {
  
}

function project_tt_form() {
  //Related Projects
  //Related Tasks
  $form['#prefix'] = "<div class='project-tt-form'>";
  $form['#suffix'] = "</div>";
  drupal_add_js(TTPATH . '/js/project_tt.js');
  $options = _project_tt_get_tasks();
  $form['task'] = array(
    '#type' => 'select',
    '#title' => 'related task',
    '#options' => $options,
    '#name' => 'tt_tasks',  
  );
  //Time
  $form['timer'] = array(
    '#type' => 'textfield',
    '#default_value' => 0,
    '#name' => 'tt_time',
    );  
    
  //Submit
  $form['submit'] = array(
    '#type' => 'button',
    '#name' => 'tt_submit',
    '#value' => 'Submit',
    '#description' => t('this will enter a time entry into the system for this task'),
  );
  
  //Pause/Go
  $form['pause_go'] = array(
    '#type' => 'button',
    '#value'=> 'pause',
    '#name' => 'tt_go',
  );
  
  //Message area
  $form['messages'] = array(
    '#prefix' => '<div class="message-area">',
    '#markup' => 'Start Working!',
    '#suffix' => '</div>',
  );

  return $form;
 }
 
 function _project_tt_get_tasks(){
    $result = db_query("SELECT * FROM node WHERE type LIKE :task", array(':task' => 'task'));
    if($result) {
      while($row = $result->fetchAssoc()) {
        $nid = $row['nid'];
        $options[$nid] = $row['title'];
      }
    }
    if(count($options)) { return $options; } else { return array('0' => '-no tasks-'); };
 }
